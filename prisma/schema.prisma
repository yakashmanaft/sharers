// % npx prisma db pull 
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url      = "mysql://caminipk_sb_2:Kashmanaft123[eq@caminipk.beget.tech/caminipk_sb_2"
}

model Users {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique(map: "uuid") @db.VarChar(60)
  email       String    @unique(map: "email") @db.VarChar(255)
  password    String    @db.VarChar(255)
  name        String?   @db.VarChar(255)
  middleName  String?   @db.VarChar(255)
  surname     String?   @db.VarChar(255)
  role        Role      @default(USER)
  groupID     Int?      @default(0)
  groupStatus String?   @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  update_at   DateTime? @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  GENERAL
  MASTER
  USER
}

model Organizations {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique(map: "uuid") @db.VarChar(60)
  title      String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.DateTime(0)
  update_at  DateTime? @updatedAt
}

model WarehouseItems {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique(map: "uuid") @db.VarChar(60)
  title       String    @db.VarChar(255)
  type        String    @db.VarChar(255)
  qty         Int       @default(0)
  measure     String    @db.VarChar(255)
  location    String    @db.VarChar(255)
  locationID  Int       @default(1)
  position    String?   @db.VarChar(255)
  ownerID     Int       @default(1)
  ownerType   String    @default("user") @db.VarChar(255)
  responsible Int       @default(1)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  update_at   DateTime? @updatedAt
}

// transactionsTypes (created | added | subtracted | moved | changeOwner | changeResponsible)
model WarehouseItemsLedger {
  id                    Int       @id @default(autoincrement())
  created_at            DateTime  @default(now()) @db.DateTime(0)
  transactionType       String    @db.VarChar(255)
  // itemID                Int       @default(0)
  itemTitle             String    @db.VarChar(255)
  authorID              Int       @default(0)
  locationFrom          String?   @db.VarChar(255)
  locationFromID        Int?      @default(0)
  locationTo            String    @db.VarChar(255)
  locationToID          Int       @default(0)
  prevOwnerID           Int?      @default(0)
  prevOwnerType         String?   @db.VarChar(255)
  currentOwnerID        Int       @default(0)
  currentOwnerType      String    @db.VarChar(255)
  prevResponsibleID     Int?      @default(0)
  currentResponsibleID  Int       @default(0)
}

model Projects {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique(map: "uuid") @db.VarChar(60)
  title       String    @db.VarChar(255)
  address     String    @db.VarChar(255)
  partnerID   Int       @default(0)
  partnerType String    @default("user") @db.VarChar(255)
  creator     Int       @default(0)
  curator     Int       @default(0)
  workType    String    @db.VarChar(255)
  completion  Float     @default(0.00)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  update_at   DateTime? @updatedAt
}

// места хранения компании (Склад, Офис, Ремонтные организации)
model Locations {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique(map: "uuid") @db.VarChar(60)
  title      String    @db.VarChar(255)
  type       String    @default("office")
  address    String    @db.VarChar(255)
  ownerID    Int       @default(0)
  ownerType  String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.DateTime(0)
  update_at  DateTime? @updatedAt
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model users {
//   id             Int              @id @default(autoincrement())
//   uuid           String           @unique(map: "uuid") @db.VarChar(60)
//   email          String           @unique(map: "email") @db.VarChar(255)
//   password       String           @db.VarChar(255)
//   avatar         String?          @db.VarChar(1000)
//   permissions    String?          @db.VarChar(4000)
//   first_name     String           @db.VarChar(255)
//   last_name      String           @db.VarChar(255)
//   role           Role             @default(GENERAL)
//   email_verified Boolean          @default(false)
//   is_active      Boolean          @default(true)
//   last_login     DateTime?        @db.DateTime(0)
//   created_at     DateTime         @default(now()) @db.DateTime(0)
//   deleted_at     DateTime?        @db.DateTime(0)
//   updated_at     DateTime?        @updatedAt
//   provider_users provider_users[]
//   refresh_tokens refresh_tokens[]
//   sessions       sessions[]
// }

// model provider_users {
//   id               Int       @id @default(autoincrement())
//   provider         Provider
//   provider_user_id String    @unique(map: "provider_user_id")
//   user_id          Int
//   updated_at       DateTime? @updatedAt
//   user             users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@index([user_id], map: "provider_users_user_id_fkey")
// }

// model sessions {
//   id           Int       @id @default(autoincrement())
//   user_id      Int
//   sid          String    @unique(map: "sid")
//   start_time   DateTime  @default(now())
//   end_time     DateTime?
//   access_token String    @db.VarChar(4000)
//   csrf_token   String    @db.VarChar(255)
//   is_active    Boolean
//   ip_address   String
//   updated_at   DateTime? @updatedAt
//   user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@index([user_id], map: "sessions_user_id_fkey")
// }

// model refresh_tokens {
//   id           Int       @id @default(autoincrement())
//   token_id     String    @unique(map: "token_id") @db.VarChar(60)
//   user_id      Int
//   is_active    Boolean
//   date_created DateTime  @default(now()) @db.DateTime(0)
//   updated_at   DateTime? @updatedAt
//   user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@index([user_id], map: "refresh_tokens_user_id_fkey")
// }

// model one_time_tokens {
//   id           Int        @id @default(autoincrement())
//   token_id     String     @unique(map: "token_id") @db.VarChar(60)
//   token_type   tokenType?
//   expires_at   DateTime   @db.DateTime(0)
//   date_created DateTime   @default(now()) @db.DateTime(0)
//   updated_at   DateTime?  @updatedAt
// }

// enum Role {
//   SUPER_ADMIN
//   ADMIN
//   GENERAL
// }

// enum Provider {
//   GOOGLE
// }

// enum tokenType {
//   RESET
// }
